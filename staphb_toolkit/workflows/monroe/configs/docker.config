docker.enabled = true

includeConfig 'docker_containers.config'

process {
  errorStrategy = 'retry'
  maxRetries = 1
  cpus = 2
  memory = '4 GB'

  if(params.pipe == "ont"){
    withName:guppy_basecalling{
      container = guppy_gpu_container
    }
    withName:guppy_demultiplexing{
      container = guppy_cpu_container
      stageInMode = 'copy'
    }
    withName:artic_guppyplex{
      container = artic_medaka_container
      stageInMode = 'copy'
    }
    withName:artic_medaka_pipeline{
      container = artic_medaka_container
    }
    withName:samtools{
      container = samtools_container
    }
    withName:pangolin_typing{
      container = pangolin_container
    }
    withName:assembly_results{
      container = tiptoft_container
    }
  }

  if(params.pipe == "clearlabs"){
    withName:artic_medaka_pipeline{
      container = theiagen_artic_medaka_container
    }
    withName:samtools{
      container = samtools_container
    }
    withName:pangolin_typing{
      container = pangolin_container
    }
    withName:assembly_results{
      container = tiptoft_container
    }
  }

  if(params.pipe == "pe"){
    withName:preProcess{
      container = fastqc_container
    }
    withName:trim{
      container = trimmomatic_container
    }
    withName:cleanreads{
      container = bbtools_container
    }
    withName:ivar{
      container = ivar_container
    }
    withName:samtools{
      container = samtools_container
    }
    withName:pangolin_typing{
      container = pangolin_container
    }
    withName:assembly_results{
      container = tiptoft_container
    }
  }

  if(params.pipe == "cluster"){
    withName:msa{
      container = mafft_container
    }
    withName:snp_matrix{
      container = snp_dists_container
    }
    withName:iqtree{
      container = iqtree_container
    }
    withName:render{
      container = render_container
    }
  }
}
